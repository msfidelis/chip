// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "matheus@nanoshots.com.br"
        },
        "license": {
            "name": "MIT",
            "url": "https://github.com/mfidelis/chip/blob/master/LICENSE"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/burn/cpu": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Loadtest"
                ],
                "summary": "Burn CPU for Loadtests and Auto Scaling Tests"
            }
        },
        "/burn/ram": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Loadtest"
                ],
                "summary": "Burn RAM for Loadtests and Auto Scaling Tests"
            }
        },
        "/healthcheck": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Healthcheck"
                ],
                "summary": "Return 200 status Ok in healthcheck"
            }
        },
        "/healthcheck/error": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Healthcheck"
                ],
                "summary": "Return 500 Error Status Code"
            }
        },
        "/healthcheck/fault": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Healthcheck"
                ],
                "summary": "Inject common errors in healthcheck"
            }
        },
        "/healthcheck/fault/soft": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Healthcheck"
                ],
                "summary": "Inject ocasional erros in healthcheck"
            }
        },
        "/reflection": {},
        "/system": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Return 500 Error Status Code"
            }
        },
        "/system/environment": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Dump all environment variables in container"
            }
        },
        "/version": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Return version for container"
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "",
	BasePath:    "/",
	Schemes:     []string{},
	Title:       "Chip",
	Description: "Cloud Native Toolset Running in Containers.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}

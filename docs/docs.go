// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "matheus@nanoshots.com.br"
        },
        "license": {
            "name": "MIT",
            "url": "https://github.com/mfidelis/chip/blob/master/LICENSE"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/burn/cpu": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Loadtest"
                ],
                "summary": "Burn CPU for Loadtests and Auto Scaling Tests"
            }
        },
        "/burn/ram": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Loadtest"
                ],
                "summary": "Burn RAM for Loadtests and Auto Scaling Tests"
            }
        },
        "/healthcheck": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Healthcheck"
                ],
                "summary": "Return 200 status Ok in healthcheck",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/healthcheck.Healthcheck"
                        }
                    }
                }
            }
        },
        "/healthcheck/error": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Healthcheck"
                ],
                "summary": "Return 500 Error Status Code",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/healthcheck.Healthcheck"
                        }
                    }
                }
            }
        },
        "/healthcheck/fault": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Healthcheck"
                ],
                "summary": "Inject common errors in healthcheck",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/healthcheck.Healthcheck"
                        }
                    }
                }
            }
        },
        "/healthcheck/fault/soft": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Healthcheck"
                ],
                "summary": "Inject ocasional erros in healthcheck",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/healthcheck.Healthcheck"
                        }
                    }
                }
            }
        },
        "/liveness": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Liveness"
                ],
                "summary": "Return 200 status Ok in Liveness",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/liveness.Liveness"
                        }
                    }
                }
            }
        },
        "/liveness/error": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Liveness"
                ],
                "summary": "Return 500 Error Status Code",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/liveness.Liveness"
                        }
                    }
                }
            }
        },
        "/logging": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logging"
                ],
                "summary": "Sent log events to application stdout",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Number of log events; default 1000",
                        "name": "events",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/logging.response"
                        }
                    }
                }
            }
        },
        "/proxy": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Proxy"
                ],
                "summary": "Proxy Request",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/proxy.Response"
                        }
                    }
                }
            }
        },
        "/readiness": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Readiness"
                ],
                "summary": "Return 200 status Ok in Readiness",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/readiness.Readiness"
                        }
                    }
                }
            }
        },
        "/readiness/error": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Readiness"
                ],
                "summary": "Return 500 Error Status Code",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/readiness.Readiness"
                        }
                    }
                }
            }
        },
        "/reflection": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reflection"
                ],
                "summary": "Retun request parameters in response for transformation tests",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reflect.Request"
                        }
                    }
                }
            },
            "put": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reflection"
                ],
                "summary": "Retun request parameters in response for transformation tests",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reflect.Request"
                        }
                    }
                }
            },
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reflection"
                ],
                "summary": "Retun request parameters in response for transformation tests",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reflect.Request"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reflection"
                ],
                "summary": "Retun request parameters in response for transformation tests",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reflect.Request"
                        }
                    }
                }
            },
            "patch": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reflection"
                ],
                "summary": "Retun request parameters in response for transformation tests",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reflect.Request"
                        }
                    }
                }
            }
        },
        "/system": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Return 500 Error Status Code",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/system.Capabilities"
                        }
                    }
                }
            }
        },
        "/system/environment": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Dump all environment variables in container"
            }
        },
        "/version": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Version"
                ],
                "summary": "Return version for container"
            }
        },
        "/whoami": {
            "get": {
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "ImATeaPot"
                ],
                "summary": "Return 200 status Teapot in Teapot",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/teapot.Teapot"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "healthcheck.Healthcheck": {
            "type": "object",
            "required": [
                "description",
                "status"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "liveness.Liveness": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "status": {
                    "type": "string"
                }
            }
        },
        "logging.response": {
            "type": "object",
            "required": [
                "message",
                "status"
            ],
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "proxy.Response": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string"
                },
                "headers": {
                    "type": "string"
                },
                "status_code": {
                    "type": "integer"
                }
            }
        },
        "readiness.Readiness": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "status": {
                    "type": "string"
                }
            }
        },
        "reflect.Request": {
            "type": "object",
            "required": [
                "body",
                "cookies",
                "headers",
                "method",
                "params",
                "path"
            ],
            "properties": {
                "body": {
                    "type": "string"
                },
                "cookies": {
                    "type": "string"
                },
                "headers": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "params": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                }
            }
        },
        "system.Capabilities": {
            "type": "object",
            "required": [
                "cpus",
                "hostname",
                "hypervisor",
                "memory",
                "os"
            ],
            "properties": {
                "cpus": {
                    "type": "integer"
                },
                "hostname": {
                    "type": "string"
                },
                "hypervisor": {
                    "type": "string"
                },
                "memory": {
                    "type": "integer"
                },
                "os": {
                    "type": "string"
                }
            }
        },
        "teapot.Teapot": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "",
	BasePath:    "/",
	Schemes:     []string{},
	Title:       "Chip",
	Description: "Cloud Native Toolset Running in Containers.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
